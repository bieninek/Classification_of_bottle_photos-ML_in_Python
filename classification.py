# -*- coding: utf-8 -*-
"""PSI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S2-dWDTUydb9iY0KV_sDj6Mu71ArJC7m
"""

# kaggle link : https://www.kaggle.com/datasets/vencerlanz09/bottle-synthetic-images-dataset

from google.colab import drive
drive.mount('/content/drive')

import warnings
warnings.filterwarnings("ignore")

"""#Unzip"""

!unzip drive/MyDrive/MyImages.zip

!unzip drive/MyDrive/BottleImages.zip

"""#Imports"""

import os
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
from random import randint

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Conv2D, AvgPool2D, BatchNormalization, Dropout, Flatten, Dense
from tensorflow.keras.models import Sequential

"""#Loading data"""

img_gen = ImageDataGenerator(rescale=1./255)

train_loader = img_gen.flow_from_directory(
    directory = "BottleImages/train", target_size = (128, 128), batch_size = 50, seed = 42
)

test_loader = img_gen.flow_from_directory(
    directory = "BottleImages/test", target_size = (128, 128), batch_size = 50, seed = 42
)

train_loader.class_indices

"""Trzeba zamieniÄ‡..."""

idx_to_classes = {val:key for key, val in dict(train_loader.class_indices).items()}
idx_to_classes

"""#Building a model



"""

model = Sequential()
# Convolution 1
model.add(Conv2D(32, kernel_size=(4,4), activation = "relu", input_shape = (128, 128, 3)))
model.add(AvgPool2D(pool_size = (4,4)))
model.add(BatchNormalization())
model.add(Dropout(0.3))

# Convolution 2
model.add(Conv2D(64, kernel_size=(3,3), activation = "relu"))
model.add(AvgPool2D(pool_size = (3,3)))
model.add(BatchNormalization())
model.add(Dropout(0.3))

# Convolution 3
model.add(Conv2D(128, kernel_size=(3,3), activation = "relu"))
model.add(AvgPool2D(pool_size = (3,3)))
model.add(BatchNormalization())
model.add(Dropout(0.3))

# Convolution 4
model.add(Conv2D(256, kernel_size=(2,2), activation = "relu"))
model.add(AvgPool2D(pool_size = (1,1)))
model.add(BatchNormalization())
model.add(Dropout(0.3))

# Convolution 5
model.add(Conv2D(16, kernel_size=(1,1), activation = "relu"))
model.add(AvgPool2D(pool_size = (1,1)))
model.add(BatchNormalization())
model.add(Dropout(0.3))

# Flatten & Linear Fully Connected Layers
model.add(Flatten())
model.add(Dense(32, activation = "relu"))
model.add(Dropout(0.3))
model.add(Dense(5, activation = "softmax"))

import tensorflow as tf

model.compile(optimizer="adam", loss = "categorical_crossentropy", metrics = [tf.keras.metrics.Precision()])

# Steps
train_steps = len(train_loader)    # = (round(total_train_images / batch_size))
test_steps = len(test_loader)    # = (round(total_test_images / batch_size))

train_metrics = model.fit_generator(
    generator = train_loader,
    steps_per_epoch = train_steps,
    epochs = 20,
    validation_data = test_loader,
    validation_steps = test_steps
)

"""#Graphs"""

train_loss = train_metrics.history["loss"]
train_accuracy = train_metrics.history["precision"]
test_loss = train_metrics.history["val_loss"]
test_accuracy = train_metrics.history["val_precision"]

"""###Train Loss vs Validation Loss"""

train_loss

test_loss

plt.plot(range(20), train_loss, label = "Train Loss")
plt.plot(range(20), test_loss, label = "Test Loss")
plt.xlabel("Epochs")
plt.ylabel("Loss")
plt.legend()

"""###Train Accuracy vs Validation Accuracy"""

train_accuracy

test_accuracy

plt.plot(range(20), train_accuracy, label = "Train Precison")
plt.plot(range(20), test_accuracy, label = "Test Precision")
plt.xlabel("Epochs")
plt.ylabel("Precision")
plt.legend()

"""#Demo"""

pred_list = [f"MyImages/pred/{i}" for i in os.listdir("MyImages/pred")]
len(pred_list)

for i in range(10):
  num = randint(0, len(pred_list)-1)
  img = Image.open(pred_list[num])
  img = img.resize((128, 128))
  display(img)
  img_arr = np.array(img)
  img_arr = img_arr[np.newaxis, :]
  img_arr = img_arr.astype("float")
  img_arr = img_gen.standardize(img_arr)
  probability = model(img_arr)
  pred = np.argmax(probability)
  print("Model Prediction: ",idx_to_classes[pred])
  print("==========================================")

"""#Confusion matrix"""

pred_list = [f"BottleImages/pred/{i}" for i in os.listdir("BottleImages/pred")]
for i in range(len(pred_list)):
  num = randint(0, len(pred_list)-1)
  img = Image.open(pred_list[i])
  img = img.resize((128, 128))
  display(img)
  img_arr = np.array(img)
  img_arr = img_arr[np.newaxis, :]
  img_arr = img_arr.astype("float")
  img_arr = img_gen.standardize(img_arr)
  probability = model(img_arr)
  pred = np.argmax(probability)
  print("Model Prediction: ",idx_to_classes[pred])
  print("==========================================")

import matplotlib.pyplot as plt
import numpy
from sklearn import metrics

real = ["wine", "wine", "beer", "water", "plastic", "wine", "wine", "beer",
"water", "beer", "water", "plastic", "plastic", "soda", "water", "soda",
"beer", "soda", "water", "soda", "plastic", "soda", "beer", "water", "wine", "plastic"]

predicted = ["wine", "wine", "beer", "water", "plastic", "wine", "wine",
"beer", "water", "beer", "water", "plastic", "plastic", "soda", "wine", "soda",
"beer", "soda", "water", "soda", "plastic", "soda", "wine", "water", "wine", "plastic"]

confusion_matrix = metrics.confusion_matrix(real, predicted)

cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix,
                                            display_labels = ['Beer', 'Plastic', 'Soda', 'Water', 'Wine'])

cm_display.plot()
plt.show()